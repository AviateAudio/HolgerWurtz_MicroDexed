/*
 * Company: Holger Wurtz
 * Effect Name: MicroDexed
 * Description: FM synthesis inspired by DX7 and similar synths.
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#include <cmath>
#include "Aviate/LibBasicFunctions.h"
#include "MicroDexed.h"

// Some useful aliases, file scope only
#define audioBlockReceiveReadOnly receiveReadOnlyFloat
#define audioBlockReceiveWritable receiveWritableFloat
#define audioBlockAllocate        allocateFloat

using namespace Aviate;

namespace HolgerWurtz_MicroDexed {

void MicroDexed::mapMidiControl(int parameter, int midiCC, int midiChannel)
{
    if (parameter >= NUM_CONTROLS) {
        return ; // Invalid midi parameter
    }
    m_midiConfig[parameter][MIDI_CHANNEL] = midiChannel;
    m_midiConfig[parameter][MIDI_CONTROL] = midiCC;
}

void MicroDexed::setParam(int paramIndex, float paramValue)
{
    switch(paramIndex) {
    case 0 : bypass( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 1 : volume( (paramValue - 0.000000) / (10.000000 - 0.000000) ); break;
    case 2 : transpose( (paramValue - 0.000000) / (35.000000 - 0.000000) ); break;
    case 3 : category( (paramValue - 0.000000) / (3.000000 - 0.000000) ); break;
    case 4 : piano( (paramValue - 0.000000) / (18.000000 - 0.000000) ); break;
    case 5 : organ( (paramValue - 0.000000) / (12.000000 - 0.000000) ); break;
    case 6 : strings( (paramValue - 0.000000) / (12.000000 - 0.000000) ); break;
    case 7 : finetales( (paramValue - 0.000000) / (31.000000 - 0.000000) ); break;
    case 8 : compressorenable( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 9 : compressorpregain( (paramValue - 0.000000) / (12.000000 - 0.000000) ); break;
    case 10 : compressorattack( (paramValue - 0.000000) / (500.000000 - 0.000000) ); break;
    default : break;
    }
}

float MicroDexed::getUserParamValue(int paramIndex, float normalizedParamValue)
{
    switch(paramIndex) {
    case 0 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // bypass
    case 1 : return ( ((10.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // volume
    case 2 : return ( ((35.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // transpose
    case 3 : return ( ((3.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // category
    case 4 : return ( ((18.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // piano
    case 5 : return ( ((12.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // organ
    case 6 : return ( ((12.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // strings
    case 7 : return ( ((31.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // finetales
    case 8 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // compressorenable
    case 9 : return ( ((12.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // compressorpregain
    case 10 : return ( ((500.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // compressorattack
    default : return 0.0f;
    }
}


bool MicroDexed::m_enableAndBypassCheck(unsigned numOutputs)
{
    // check if effect is disabled
    if (m_enable == false) {
        // do not transmit or process any audio, return as quickly as possible
        return false;
    }  // end of enable check

    // check if effect is in bypass
    if (m_bypass == true) {
        // no inputs so tranmit silence (zeros)
        AudioBlock* outputs[numOutputs];
        for (unsigned ch = 0; ch < numOutputs; ch++) {
            outputs[ch] = audioBlockAllocate();
            if (outputs[ch]) {
                clearAudioBlock(outputs[ch]);  // from libBasicFunctions.h
                AudioStream::transmit(outputs[ch], ch);  // tranmit on channel 'ch'
                AudioStream::release(outputs[ch]);  // release the audio block
            }
        }
        return false;  // indicate to caller no further processing due to bypass mode
    } else {
        return true;  // indicate to caller to continue normal processing
    }
}

const uint8_t rblk[256] = TEENSY_AUDIO_BLOCK;
const uint8_t* MicroDexed::getRblk() { return rblk; }
static constexpr char PROGMEM MicroDexed_name[] = {0x48, 0x6f, 0x6c, 0x67, 0x65, 0x72, 0x20, 0x57, 0x75, 0x72, 0x74, 0x7a, 0x3a, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x44, 0x65, 0x78, 0x65, 0x64, 0x0};
const char* MicroDexed::getName() { return MicroDexed_name; }

}
