/*
 * Company: Holger Wurtz
 * Effect Name: MicroDexed
 * Description: Yamaha DX7
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#pragma once

#include <Audio.h>
#include <arm_math.h>
#include "Aviate/AudioEffectWrapper.h"

//!s - START_USER_INCLUDES - put your #includes below this line before the matching END
class Dexed;  // forward declare
//!e - END_USER_INCLUDES

namespace HolgerWurtz_MicroDexed {

//!s - START_USER_EFFECT_TYPES - put your effect types below this line before the matching END
enum class InstrumentCategory : unsigned {
    PIANO,
    ORGAN,
    STR_BOW,
    STR_PLUCK,
    SYNTH,
    BRASS,
    WINDS,
    BASS,
    BELLS,
    PERCUSS
};
//!e - END_USER_EFFECT_TYPES

// Some useful aliases
#define AUDIOSTREAM_FLOAT
using AudioBlock    = audio_block_float32_t;
using AudioDataType = float;
#define audioBlockReceiveReadOnly receiveReadOnlyFloat
#define audioBlockReceiveWritable receiveWritableFloat
#define audioBlockAllocate        allocateFloat

class MicroDexed : public AudioStream, public Aviate::AudioEffectFloat {
public:
    static constexpr unsigned NUM_INPUTS  = 1;
    static constexpr unsigned NUM_OUTPUTS = 1;

    // List of effect control names
    enum {
        Bypass_e = 0,
        Volume_e = 1,
        Transpose_e = 2,
        Category_e = 3,
        Piano_e = 4,
        Organ_e = 5,
        CompressorEnable_e = 6,
        CompressorPregain_e = 7,
        CompressorAttack_e = 8,
        NUM_CONTROLS
    };

    //!s - START_USER_CLASS_TYPES - put your custom class types below this line before the matching END
    //!e - END_USER_CLASS_TYPES

    MicroDexed();

    //!s - START_USER_CONSTRUCTORS - put your custom constructors below this line before the matching END
    //!e - END_USER_CONSTRUCTORS

    virtual ~MicroDexed();

    // Standard EFX interface functions - do not change these declaration
    virtual void update(); // main audio processing loop function
    void mapMidiControl(int parameter, int midiCC, int midiChannel = 0) override;
    void processMidi(int status, int data1, int data2) override;
    void setParam(int paramIndex, float paramValue) override;
    float getUserParamValue(int paramIndex, float normalizedParamValue);
    const char* getName() override;
    const uint8_t* getRblk() override;

    // control value set functions, must take floats between 0.0f and 1.0f - do not change these declarations
    void volume(float value) override;
    void transpose(float value);
    void category(float value);
    void piano(float value);
    void organ(float value);
    void compressorenable(float value);
    void compressorpregain(float value);
    void compressorattack(float value);

    //!s - START_USER_PUBLIC_MEMBERS - put your public members below this line before the matching END
    bool hasMidiProcessing() override { return true; }
    //!e - END_USER_PUBLIC_MEMBERS

private:
    audio_block_float32_t *m_inputQueueArray[1]; // required by AudioStream base class, array size is num inputs
    int m_midiConfig[NUM_CONTROLS][2]; // stores the midi parameter mapping

    // m_bypass and m_volume are already provided by the base class AudioEffectWrapper or AudioEffectFloat
    float m_transpose = 0.0f;
    float m_category = 0.0f;
    float m_piano = 0.0f;
    float m_organ = 0.0f;
    float m_compressorenable = 0.0f;
    float m_compressorpregain = 0.0f;
    float m_compressorattack = 0.0f;

    audio_block_float32_t* m_basicInputCheck(audio_block_float32_t* inputAudioBlock, unsigned outputChannel);

    //!s - START_USER_PRIVATE_MEMBERS - put your private members below this line before the matching END
    Dexed* m_dexed;
    const uint16_t audio_block_time_us = 1000000 / (AUDIO_SAMPLE_RATE_EXACT / AUDIO_BLOCK_SAMPLES);
    volatile bool in_update = false;

    void m_init();
    bool m_isInit = false;
    //void m_setVoice(unsigned bank, unsigned voice, unsigned tranpose);
    //unsigned bankSel = 0;
    //unsigned voiceSel = 0;
    unsigned m_transposeSel = 0;

    void m_updateVoice();
    InstrumentCategory m_categorySel = InstrumentCategory::PIANO;
    unsigned m_pianoSel = 0;
    unsigned m_organSel = 0;
    //!e - END_USER_PRIVATE_MEMBERS

};

}
